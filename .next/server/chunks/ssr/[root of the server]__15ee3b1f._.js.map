{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/defi-strategy-explanation.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Explains DeFi strategies using Gemini.\n *\n * - explainDefiStrategy - A function that explains a given DeFi strategy.\n * - ExplainDefiStrategyInput - The input type for the explainDefiStrategy function.\n * - ExplainDefiStrategyOutput - The return type for the explainDefiStrategy function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainDefiStrategyInputSchema = z.object({\n  strategy: z.string().describe('The DeFi strategy to explain (e.g., yield farming, flash loans).'),\n});\nexport type ExplainDefiStrategyInput = z.infer<typeof ExplainDefiStrategyInputSchema>;\n\nconst ExplainDefiStrategyOutputSchema = z.object({\n  explanation: z.string().describe('A clear and concise explanation of the DeFi strategy, including mechanics and risks. Format your explanation using basic HTML: use `<h3>` for section titles, `<strong>` for bold text, and `<ul>` or `<ol>` with `<li>` for lists. Paragraphs should be wrapped in `<p>` tags. Example: \"<h3>Mechanics</h3><p>Strategy works by...</p><ul><li>Step 1</li></ul>\". Do not use Markdown syntax like \"###\" or \"**\".'),\n});\nexport type ExplainDefiStrategyOutput = z.infer<typeof ExplainDefiStrategyOutputSchema>;\n\nexport async function explainDefiStrategy(input: ExplainDefiStrategyInput): Promise<ExplainDefiStrategyOutput> {\n  return explainDefiStrategyFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainDefiStrategyPrompt',\n  input: {schema: ExplainDefiStrategyInputSchema},\n  output: {schema: ExplainDefiStrategyOutputSchema},\n  prompt: `You are a DeFi expert. Explain the following DeFi strategy to the user in detail.\n  Your explanation should cover:\n  1.  **Mechanics**: How does this strategy work? What are the steps involved?\n  2.  **Potential Risks**: What are the common risks associated with this strategy (e.g., impermanent loss, smart contract vulnerabilities, liquidation, market volatility)? Explain each risk clearly.\n  3.  **Considerations for OKX DEX**: If relevant, how might this strategy apply or differ on OKX DEX?\n  4.  **Before Proceeding**: What key things should a user research or consider before engaging in this strategy?\n\n  Present the information in a structured and easy-to-understand manner. Use basic HTML tags for headings (<h3>), lists (<ul>, <ol>, <li>), paragraphs (<p>), and bold text (<strong>) to improve readability. Do not output raw Markdown.\n\n  Strategy: {{{strategy}}}`,\n});\n\nconst explainDefiStrategyFlow = ai.defineFlow(\n  {\n    name: 'explainDefiStrategyFlow',\n    inputSchema: ExplainDefiStrategyInputSchema,\n    outputSchema: ExplainDefiStrategyOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,uCAAiB,GAAjB,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;0BASe,CAAC;AAC3B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/personalized-strategy-suggestions.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A personalized DeFi strategy suggestion AI agent based on user's token holdings, market conditions, and risk profile.\n *\n * - personalizedStrategySuggestions - A function that suggests DeFi strategies.\n * - PersonalizedStrategySuggestionsInput - The input type for the personalizedStrategySuggestions function.\n * - PersonalizedStrategySuggestionsOutput - The return type for the personalizedStrategySuggestions function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { RiskProfile } from '@/types';\nimport {z} from 'genkit';\n\nconst PersonalizedStrategySuggestionsInputSchema = z.object({\n  userTokenHoldings: z\n    .string()\n    .describe(\"The user's token holdings in their connected Metamask wallet. Should be in a readable format (e.g., '2.5 ETH, 5000 USDC').\"),\n  okxDexMarketConditions: z.string().describe('Real-time or simulated market conditions on OKX DEX.'),\n  riskProfile: z.enum(['conservative', 'balanced', 'aggressive']).optional().describe(\"The user's selected risk profile. 'conservative' favors low-risk, stable returns. 'balanced' seeks a mix of growth and safety. 'aggressive' targets higher yields with higher risk tolerance.\"),\n});\nexport type PersonalizedStrategySuggestionsInput = z.infer<typeof PersonalizedStrategySuggestionsInputSchema>;\n\nconst PersonalizedStrategySuggestionsOutputSchema = z.object({\n  suggestedStrategies: z\n    .string()\n    .describe('A list of 3-5 suggested DeFi strategies on OKX DEX, personalized to the user. Format as an HTML ordered list (e.g., \"<ol><li><strong>Strategy Name:</strong> Description...</li></ol>\"). Include specific examples like token amounts if applicable.'),\n  rationale: z\n    .string()\n    .describe('The rationale behind the suggested strategies, considering the user holdings, market conditions, and risk profile. Format as HTML paragraphs using `<p>` tags, possibly using `<strong>` for emphasis. Ensure it is a valid HTML string.'),\n});\nexport type PersonalizedStrategySuggestionsOutput = z.infer<typeof PersonalizedStrategySuggestionsOutputSchema>;\n\nexport async function personalizedStrategySuggestions(input: PersonalizedStrategySuggestionsInput): Promise<PersonalizedStrategySuggestionsOutput> {\n  return personalizedStrategySuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'personalizedStrategySuggestionsPrompt',\n  input: {schema: PersonalizedStrategySuggestionsInputSchema},\n  output: {schema: PersonalizedStrategySuggestionsOutputSchema},\n  prompt: `You are an AI DeFi strategist specializing in personalized investment recommendations based on user holdings, real-time market conditions on OKX DEX, and their risk profile.\n\n  Given the following information:\n  User Token Holdings: {{{userTokenHoldings}}}\n  OKX DEX Market Conditions: {{{okxDexMarketConditions}}}\n  {{#if riskProfile}}User Risk Profile: {{{riskProfile}}}{{/if}}\n\n  Please provide:\n  1.  **Suggested Strategies**: A list of 3-5 specific DeFi strategies suitable for the user on OKX DEX. For each strategy, briefly explain it and, where appropriate, suggest example allocations based on their holdings (e.g., \"Allocate X amount of Y token...\"). Format this as an HTML ordered list (e.g., \"<ol><li><strong>Strategy Name:</strong> Description...</li></ol>\").\n  2.  **Rationale**: A concise explanation for why these strategies are being recommended, considering their portfolio, the market conditions, potential yield, risk (impermanent loss, liquidation risk), gas fees, {{#if riskProfile}}and importantly, their stated risk profile: '{{{riskProfile}}}'.\n      *   If 'conservative', prioritize capital preservation and stable, lower-risk yields (e.g., lending stablecoins, staking well-established assets).\n      *   If 'balanced', suggest a mix of strategies, some for stability and some for moderate growth with acceptable risk.\n      *   If 'aggressive', include options with higher potential returns, even if they come with higher volatility or newer protocols (always with clear risk warnings).\n      Acknowledge the risk profile in your rationale.{{else}}and general best practices.{{/if}} Format this as HTML, using <p> tags for paragraphs and <strong> for emphasis.\n\n  Prioritize strategies that align with the user's existing assets, the provided market conditions, {{#if riskProfile}}and their selected risk profile.{{else}}and general best practices.{{/if}}\n  Ensure your output uses basic HTML tags (e.g. <p>, <strong>, <ul>, <ol>, <li>) for lists, paragraphs, and bolding to improve readability. Do not output raw Markdown.\n  Example for a suggested strategy list item: \"<li><strong>ETH Staking on OKX PoolX:</strong> Stake a portion of your ETH (e.g., 1 ETH) in OKX PoolX to earn steady returns. This is generally lower risk...</li>\"\n  `,\n});\n\nconst personalizedStrategySuggestionsFlow = ai.defineFlow(\n  {\n    name: 'personalizedStrategySuggestionsFlow',\n    inputSchema: PersonalizedStrategySuggestionsInputSchema,\n    outputSchema: PersonalizedStrategySuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AAEA;AAAA;;;;;;AAEA,MAAM,6CAA6C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1D,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;IACZ,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5C,aAAa,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAgB;QAAY;KAAa,EAAE,QAAQ,GAAG,QAAQ,CAAC;AACtF;AAGA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CAAC;IACZ,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,uCAA6B,GAA7B,gCAAgC,KAA2C;IAC/F,OAAO,oCAAoC;AAC7C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0C;IAC1D,QAAQ;QAAC,QAAQ;IAA2C;IAC5D,QAAQ,CAAC;;;;;;;;;;;;;;;;;;EAkBT,CAAC;AACH;AAEA,MAAM,sCAAsC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n\"use server\";\nimport { explainDefiStrategy, ExplainDefiStrategyInput, ExplainDefiStrategyOutput } from '@/ai/flows/defi-strategy-explanation';\nimport { personalizedStrategySuggestions, PersonalizedStrategySuggestionsInput, PersonalizedStrategySuggestionsOutput } from '@/ai/flows/personalized-strategy-suggestions';\nimport type { SimulationResult } from '@/types';\n\nexport async function getStrategyExplanation(input: ExplainDefiStrategyInput): Promise<ExplainDefiStrategyOutput | null> {\n  try {\n    const result = await explainDefiStrategy(input);\n    return result;\n  } catch (error) {\n    console.error(\"Error fetching strategy explanation:\", error);\n    // Return a structured error response if needed, or just the string part\n    return { explanation: \"Failed to load explanation. Please try again.\" };\n  }\n}\n\nexport async function getPersonalizedSuggestions(input: PersonalizedStrategySuggestionsInput): Promise<PersonalizedStrategySuggestionsOutput | null> {\n  try {\n    const result = await personalizedStrategySuggestions(input);\n    return result;\n  } catch (error) {\n    console.error(\"Error fetching personalized suggestions:\", error);\n    return {\n      aiSuggestions: \"Failed to load suggestions. Please try again.\",\n      aiRationale: \"Could not generate rationale due to an error.\"\n    };\n  }\n}\n\n// Mock OKX DEX Market Data\n// In a real app, this would involve API calls to OKX DEX SDK/API.\n// This function currently returns a string summary for the AI prompt.\n// IMPORTANT: This data is MOCKED and for DEMONSTRATION purposes only.\n// Real-time integration with OKX DEX is a future development task.\nexport async function getMockOkxMarketConditions(): Promise<string> {\n  // Simulate API call delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  const conditions = [\n    \"OKX DEX shows high trading volume for ETH/USDC and BTC/USDT pairs. Liquidity is deep.\",\n    \"Current average APY for stablecoin (USDC/USDT) liquidity pools on OKX DEX is around 5-8%. ETH-related pools are showing 10-15% APY.\",\n    \"Flash loan opportunities for arbitrage between OKX DEX and other platforms for various altcoins are being actively monitored; average profit potential is around 0.03-0.07% per transaction, but requires quick execution.\",\n    \"Gas fees on the compatible network (e.g., Ethereum L2s or OKTC) are currently low to moderate.\",\n    \"A new high-yield farm for a recently listed governance token (XYZ Token) just launched on a partner protocol integrated with OKX DEX, offering temporary APYs upwards of 100%, but with higher risk.\",\n    \"Market sentiment is cautiously optimistic. Bitcoin is trading sideways, while some DeFi tokens show upward momentum.\"\n  ];\n  // Select a random condition and add general volatility info\n  const baseCondition = conditions[Math.floor(Math.random() * conditions.length)];\n  const volatilityLevels = [\"low\", \"medium\", \"high\"];\n  const currentVolatility = volatilityLevels[Math.floor(Math.random() * volatilityLevels.length)];\n  \n  return `${baseCondition} Overall market volatility is currently ${currentVolatility}.`;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;;;;;;AAGO,eAAe,uCAAoB,GAApB,uBAAuB,KAA+B;IAC1E,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,wEAAwE;QACxE,OAAO;YAAE,aAAa;QAAgD;IACxE;AACF;AAEO,eAAe,uCAAwB,GAAxB,2BAA2B,KAA2C;IAC1F,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,6JAAA,CAAA,kCAA+B,AAAD,EAAE;QACrD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO;YACL,eAAe;YACf,aAAa;QACf;IACF;AACF;AAOO,eAAe,uCAAwB,GAAxB;IACpB,0BAA0B;IAC1B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,MAAM,aAAa;QACjB;QACA;QACA;QACA;QACA;QACA;KACD;IACD,4DAA4D;IAC5D,MAAM,gBAAgB,UAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,MAAM,EAAE;IAC/E,MAAM,mBAAmB;QAAC;QAAO;QAAU;KAAO;IAClD,MAAM,oBAAoB,gBAAgB,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,iBAAiB,MAAM,EAAE;IAE/F,OAAO,GAAG,cAAc,wCAAwC,EAAE,kBAAkB,CAAC,CAAC;AACxF;;;IA/CsB;IAWA;IAkBA;;AA7BA,+OAAA;AAWA,+OAAA;AAkBA,+OAAA","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/aethermind/AetherMindClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AetherMindClientPage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AetherMindClientPage() from the server but AetherMindClientPage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/aethermind/AetherMindClientPage.tsx <module evaluation>\",\n    \"AetherMindClientPage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,oFACA","debugId":null}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/aethermind/AetherMindClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AetherMindClientPage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AetherMindClientPage() from the server but AetherMindClientPage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/aethermind/AetherMindClientPage.tsx\",\n    \"AetherMindClientPage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,gEACA","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { AetherMindClientPage } from '@/components/aethermind/AetherMindClientPage';\n\nexport default function Home() {\n  return (\n    <AetherMindClientPage />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC,wJAAA,CAAA,uBAAoB;;;;;AAEzB","debugId":null}}]
}